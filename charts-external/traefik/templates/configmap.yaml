{{ if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: etc-traefik
data:
  traefik.toml: |
    # https://docs.traefik.io/configuration/commons/

    debug = false

    defaultEntryPoints = ["http"{{ if .Values.letsencrypt.enabled }}, "https"{{ end }}]
    
    [entryPoints]
        [entryPoints.http]
        address = ":80"

        {{ if .Values.letsencrypt.enabled }}
        [entryPoints.https]
        address = ":443"
          [entryPoints.https.tls]
        {{ end }}

    {{ if .Values.letsencrypt.enabled }}
    [acme]
      email = {{ .Values.letsencrypt.acmeEmail | quote }}
      storage = "/traefik-acme/acme.json"
      entryPoint = "https"
      {{ if .Values.oknesset.enabled }}
{{ .Values.oknesset.acmeDomains | indent 6 }}
      {{ end }}
      {{ if .Values.knessetdatabackend.enabled }}
{{ .Values.knessetdatabackend.acmeDomains | indent 6 }}
      {{ end }}
      {{ if .Values.anyway.enabled }}
{{ .Values.anyway.acmeDomains | indent 6 }}
      {{ end }}
      {{ if .Values.openpension.enabled }}
{{ .Values.openpension.acmeDomains | indent 6 }}
      {{ end }}
      {{ if .Values.anywayProduction.enabled }}
{{ .Values.anywayProduction.acmeDomains | indent 6 }}
      {{ end }}
      {{ if .Values.monitoring.enabled }}
{{ .Values.monitoring.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.mysadna.enableSSL .Values.mysadna.enabled }}
{{ .Values.mysadna.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.reportit.enableSSL .Values.reportit.enabled }}
{{ .Values.reportit.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.botkit.enableSSL .Values.botkit.enabled }}
{{ .Values.botkit.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.strapi.enableSSL .Values.strapi.enabled }}
{{ .Values.strapi.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.datacity.enableSSL .Values.datacity.enabled }}
{{ .Values.datacity.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.datacityNominatim.enableSSL .Values.datacityNominatim.enabled }}
{{ .Values.datacityNominatim.acmeDomains | indent 6 }}
      {{ end }}
      {{ if and .Values.datacityApi.enableSSL .Values.datacityApi.enabled }}
{{ .Values.datacityApi.acmeDomains | indent 6 }}
      {{ end }}
      [acme.dnsChallenge]
        provider = {{ .Values.letsencrypt.dnsProvider | quote }}
    {{ end }}

    [accessLog]

    [file]
    
    [backends]
      {{ if .Values.budgetkey.enabled }}
      [backends.budgetkeynginx]
        [backends.budgetkeynginx.servers.server1]
          url = {{ .Values.budgetkey.backendUrl | quote }}
      {{ end }}

      {{ if .Values.oknesset.enabled }}
      [backends.oknessetnginx]
        [backends.oknessetnginx.servers.server1]
          url = {{ .Values.oknesset.backendUrl | quote }}
      {{ end }}

      {{ if .Values.knessetdatabackend.enabled }}
      [backends.knessetdatabackend]
        [backends.knessetdatabackend.servers.server1]
          url = {{ .Values.knessetdatabackend.backendUrl | quote }}
      {{ end }}

      {{ if .Values.anyway.enabled }}
      [backends.anyway]
        [backends.anyway.servers.server1]
          url = {{ .Values.anyway.backendUrl | quote }}
      {{ end }}

      {{ if .Values.anywayProduction.enabled }}
      [backends.anywayProduction]
        [backends.anywayProduction.servers.server1]
          url = {{ .Values.anywayProduction.backendUrl | quote }}
      {{ end }}

      {{ if .Values.openpension.enabled }}
      [backends.openpension]
        [backends.openpension.servers.server1]
          url = {{ .Values.openpension.backendUrl | quote }}
      {{ end }}

      {{ if .Values.odata.enabled }}
      [backends.odata]
        [backends.odata.servers.server1]
          url = {{ .Values.odata.backendUrl | quote }}
      {{ end }}

      {{ if .Values.monitoring.enabled }}
      [backends.monitoring]
        [backends.monitoring.servers.server1]
          url = {{ .Values.monitoring.backendUrl | quote }}
      {{ end }}

      {{ if .Values.mysadna.enabled }}
      [backends.mysadna]
        [backends.mysadna.servers.server1]
          url = {{ .Values.mysadna.backendUrl | quote }}
      {{ end }}

      {{ if .Values.reportit.enabled }}
      [backends.reportit]
        [backends.reportit.servers.server1]
          url = {{ .Values.reportit.backendUrl | quote }}
      {{ end }}

      {{ if .Values.botkit.enabled }}
      [backends.botkit]
        [backends.botkit.servers.server1]
          url = {{ .Values.botkit.backendUrl | quote }}
      {{ end }}

      {{ if .Values.strapi.enabled }}
      [backends.strapi]
        [backends.strapi.servers.server1]
          url = {{ .Values.strapi.backendUrl | quote }}
      {{ end }}

      {{ if .Values.datacity.enabled }}
      [backends.datacity]
        [backends.datacity.servers.server1]
          url = {{ .Values.datacity.backendUrl | quote }}
      {{ end }}

      {{ if .Values.datacityNominatim.enabled }}
      [backends.datacityNominatim]
        [backends.datacityNominatim.servers.server1]
          url = {{ .Values.datacityNominatim.backendUrl | quote }}
      {{ end }}

      {{ if .Values.datacityApi.enabled }}
      [backends.datacityApi]
        [backends.datacityApi.servers.server1]
          url = {{ .Values.datacityApi.backendUrl | quote }}
      {{ end }}

      {{ if .Values.migdarInternalSearch.enabled }}
      [backends.migdarInternalSearch]
        [backends.migdarInternalSearch.servers.server1]
          url = {{ .Values.migdarInternalSearch.backendUrl | quote }}
      {{ end }}

      {{ if .Values.migdarWebUi.enabled }}
      [backends.migdarWebUi]
        [backends.migdarWebUi.servers.server1]
          url = {{ .Values.migdarWebUi.backendUrl | quote }}
      {{ end }}

    [frontends]
      {{ if .Values.budgetkey.enabled }}
      [frontends.budgetkeynginx]
        backend="budgetkeynginx"
        passHostHeader = true
        [frontends.budgetkeynginx.routes.route1]
          rule = {{ .Values.budgetkey.frontendRule | quote }}
      {{ end }}

      {{ if .Values.oknesset.enabled }}
      [frontends.oknessetnginx]
        backend="oknessetnginx"
        passHostHeader = true
        [frontends.oknessetnginx.headers]
          SSLRedirect = true
        [frontends.oknessetnginx.routes.route1]
          rule = {{ .Values.oknesset.frontendRule | quote }}
      {{ end }}

      {{ if .Values.knessetdatabackend.enabled }}
      [frontends.knessetdatabackend]
        backend="knessetdatabackend"
        passHostHeader = true
        [frontends.knessetdatabackend.headers]
          SSLRedirect = true
        [frontends.knessetdatabackend.routes.route1]
          rule = {{ .Values.knessetdatabackend.frontendRule | quote }}
      {{ end }}

      {{ if .Values.anyway.enabled }}
      [frontends.anyway]
        backend="anyway"
        passHostHeader = true
        [frontends.anyway.headers]
          SSLRedirect = true
        [frontends.anyway.routes.route1]
          rule = {{ .Values.anyway.frontendRule | quote }}
      {{ end }}

      {{ if .Values.anywayProduction.enabled }}
      [frontends.anywayProduction]
        backend="anywayProduction"
        passHostHeader = true
        [frontends.anywayProduction.headers]
          SSLRedirect = true
        [frontends.anywayProduction.routes.route1]
          rule = {{ .Values.anywayProduction.frontendRule | quote }}
      {{ end }}

      {{ if .Values.openpension.enabled }}
      [frontends.openpension]
        backend="openpension"
        passHostHeader = true
        [frontends.openpension.headers]
          SSLRedirect = true
        [frontends.openpension.routes.route1]
          rule = {{ .Values.openpension.frontendRule | quote }}
      {{ end }}

      {{ if .Values.odata.enabled }}
      [frontends.odata]
        backend="odata"
        passHostHeader = true
        [frontends.odata.routes.route1]
          rule = {{ .Values.odata.frontendRule | quote }}
        {{ if .Values.odata.canonicalDomainRedirect }}
        [frontends.odata.redirect]
          regex = "(http|https)://({{ .Values.odata.canonicalDomainRedirect.matchDomains }})/(.*)"
          replacement = "https://{{ .Values.odata.canonicalDomainRedirect.canonicalDomain }}/$3"
          permanent = true
        {{ end }}
      {{ end }}

      {{ if .Values.monitoring.enabled }}
      [frontends.monitoring]
        backend="monitoring"
        passHostHeader = true
        [frontends.monitoring.headers]
          SSLRedirect = true
        [frontends.monitoring.routes.route1]
          rule = {{ .Values.monitoring.frontendRule | quote }}
      {{ end }}

      {{ if .Values.mysadna.enabled }}
      [frontends.mysadna]
        backend="mysadna"
        passHostHeader = true
        {{ if .Values.mysadna.enableSSL }}
        [frontends.mysadna.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.mysadna.routes.route1]
          rule = {{ .Values.mysadna.frontendRule | quote }}
      {{ end }}

      {{ if .Values.reportit.enabled }}
      [frontends.reportit]
        backend="reportit"
        passHostHeader = true
        {{ if .Values.reportit.enableSSL }}
        [frontends.reportit.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.reportit.routes.route1]
          rule = {{ .Values.reportit.frontendRule | quote }}
      {{ end }}

      {{ if .Values.botkit.enabled }}
      [frontends.botkit]
        backend="botkit"
        passHostHeader = true
        {{ if .Values.botkit.enableSSL }}
        [frontends.botkit.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.botkit.routes.route1]
          rule = {{ .Values.botkit.frontendRule | quote }}
      {{ end }}

      {{ if .Values.strapi.enabled }}
      [frontends.strapi]
        backend="strapi"
        passHostHeader = true
        {{ if .Values.strapi.enableSSL }}
        [frontends.strapi.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.strapi.routes.route1]
          rule = {{ .Values.strapi.frontendRule | quote }}
      {{ end }}

      {{ if .Values.datacity.enabled }}
      [frontends.datacity]
        backend="datacity"
        passHostHeader = true
        {{ if .Values.datacity.enableSSL }}
        [frontends.datacity.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.datacity.routes.route1]
          rule = {{ .Values.datacity.frontendRule | quote }}
      {{ end }}

      {{ if .Values.datacityNominatim.enabled }}
      [frontends.datacityNominatim]
        backend="datacityNominatim"
        passHostHeader = true
        {{ if .Values.datacityNominatim.enableSSL }}
        [frontends.datacityNominatim.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.datacityNominatim.routes.route1]
          rule = {{ .Values.datacityNominatim.frontendRule | quote }}
      {{ end }}

      {{ if .Values.datacityApi.enabled }}
      [frontends.datacityApi]
        backend="datacityApi"
        passHostHeader = true
        {{ if .Values.datacityApi.enableSSL }}
        [frontends.datacityApi.headers]
          SSLRedirect = true
        {{ end }}
        [frontends.datacityApi.routes.route1]
          rule = {{ .Values.datacityApi.frontendRule | quote }}
      {{ end }}

      {{ if .Values.migdarInternalSearch.enabled }}
      [frontends.migdarInternalSearch]
        backend="migdarInternalSearch"
        passHostHeader = true
        [frontends.migdarInternalSearch.routes.route1]
          rule = {{ .Values.migdarInternalSearch.frontendRule | quote }}
      {{ end }}

      {{ if .Values.migdarWebUi.enabled }}
      [frontends.migdarWebUi]
        backend="migdarWebUi"
        passHostHeader = true
        [frontends.migdarWebUi.routes.route1]
          rule = {{ .Values.migdarWebUi.frontendRule | quote }}
      {{ end }}

{{ end }}
